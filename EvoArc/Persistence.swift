//
//  Persistence.swift
//  EvoArc
//
//  Manages Core Data persistence for the EvoArc browser.
//  Core Data is Apple's framework for object graph and persistence.
//
//  Note: This file appears to be auto-generated by Xcode's template.
//  Currently EvoArc uses UserDefaults and other mechanisms for most persistence,
//  so this Core Data setup may be unused or reserved for future features.
//
//  For Swift beginners:
//  - Core Data stores app data in a local SQLite database
//  - It's more powerful than UserDefaults for complex object relationships
//  - NSPersistentCloudKitContainer adds iCloud sync on top of Core Data

import CoreData  // Apple's object persistence framework

// MARK: - Persistence Controller

/// Singleton controller that manages the Core Data stack.
/// Provides access to the persistent storage container.
/// 
/// For Swift beginners:
/// - A 'struct' is a value type (copied when passed around)
/// - This struct holds configuration for Core Data storage
/// - static let shared = singleton pattern (one global instance)
struct PersistenceController {
    /// The shared singleton instance used throughout the app.
    /// Access Core Data via: PersistenceController.shared.container
    /// 
    /// For Swift beginners:
    /// - static means it belongs to the type itself, not instances
    /// - let makes it immutable (always the same instance)
    /// - This ensures only one Core Data stack exists in the app
    static let shared = PersistenceController()

    /// Preview instance for SwiftUI previews and testing.
    /// Uses in-memory storage that doesn't persist between app launches.
    /// This lets us test UI without affecting real user data.
    /// 
    /// @MainActor ensures this runs on the main thread (required for UI previews).
    /// The = { }() pattern immediately executes the closure to initialize the property.
    @MainActor
    static let preview: PersistenceController = {
        /// Create an in-memory persistence controller (data not saved to disk).
        let result = PersistenceController(inMemory: true)
        
        /// Get the view context - this is where we create and modify Core Data objects.
        /// Think of it as a "scratch pad" for working with data.
        let viewContext = result.container.viewContext
        
        /// Create 10 sample items for preview purposes.
        /// This gives SwiftUI previews realistic-looking data to display.
        /// The 0..<10 syntax creates a range from 0 to 9 (10 iterations).
        for _ in 0..<10 {
            /// Create a new Core Data entity called "Item".
            /// Note: "Item" is defined in the EvoArc.xcdatamodeld file.
            let newItem = Item(context: viewContext)
            newItem.timestamp = Date()
        }
        
        /// Try to save the sample data to the in-memory store.
        /// do-catch is Swift's error handling mechanism.
        do {
            try viewContext.save()
        } catch {
            /// If saving fails, crash the app with a descriptive error.
            /// 
            /// For Swift beginners:
            /// - fatalError() immediately terminates the app (should only be used in development)
            /// - In production code, handle errors gracefully instead
            /// - This is Xcode's template code and should be improved for shipping apps
            let nsError = error as NSError
            fatalError("Unresolved error \(nsError), \(nsError.userInfo)")
        }
        return result
    }()
    
    // MARK: - Properties
    
    /// The Core Data persistent container with CloudKit integration.
    /// NSPersistentCloudKitContainer automatically syncs data via iCloud.
    /// 
    /// For Swift beginners:
    /// - This holds the entire Core Data "stack" (model, coordinator, contexts)
    /// - CloudKit integration means data can sync across user's devices
    /// - Regular NSPersistentContainer would be local-only (no sync)
    let container: NSPersistentCloudKitContainer

    // MARK: - Initialization
    
    /// Initializes the Core Data stack.
    /// 
    /// Parameter inMemory:
    /// - false (default): Store data on disk, persists between app launches
    /// - true: Store in RAM only, useful for testing and previews
    /// 
    /// For Swift beginners:
    /// - init is Swift's initializer (like a constructor)
    /// - Bool = false provides a default value
    /// - You can call: PersistenceController() or PersistenceController(inMemory: true)
    init(inMemory: Bool = false) {
        /// Create the persistent container.
        /// The name "EvoArc" must match the .xcdatamodeld file name.
        container = NSPersistentCloudKitContainer(name: "EvoArc")
        
        /// If in-memory mode, redirect storage to /dev/null (Unix's "black hole").
        /// This makes data disappear instead of being saved to disk.
        /// Perfect for tests and previews where we don't want persistent data.
        if inMemory {
            /// Force-unwrap with ! is safe here - we know there's at least one store description.
            /// /dev/null is a special Unix file that discards all data written to it.
            container.persistentStoreDescriptions.first!.url = URL(fileURLWithPath: "/dev/null")
        }
        
        /// Load the persistent stores (databases) from disk (or /dev/null).
        /// This is asynchronous - it happens in the background.
        /// The completionHandler closure runs when loading finishes.
        container.loadPersistentStores(completionHandler: { (storeDescription, error) in
            /// Check if an error occurred during loading.
            /// 'if let' safely unwraps the optional error.
            if let error = error as NSError? {
                /// Core Data loading failed - this is a serious error.
                /// 
                /// Common causes:
                /// - Corrupted database file
                /// - Insufficient disk space  
                /// - File permissions issue
                /// - Failed migration when app model changed
                /// - Device locked with data protection enabled
                /// 
                /// For production apps, this should:
                /// 1. Log the error to analytics
                /// 2. Attempt to recover (delete and rebuild database)
                /// 3. Show user-friendly error message
                /// 4. NOT crash the app
                /// 
                /// This Xcode template uses fatalError for development simplicity.
                fatalError("Unresolved error \(error), \(error.userInfo)")
            }
        })
        
        /// Enable automatic merging of changes from CloudKit.
        /// When data syncs from other devices, automatically update the view context.
        /// 
        /// For Swift beginners:
        /// - viewContext is the main-thread context for UI work
        /// - "parent" here refers to the persistent store coordinator
        /// - Without this, you'd need to manually merge changes
        /// - This keeps the UI in sync with CloudKit changes
        container.viewContext.automaticallyMergesChangesFromParent = true
    }
}
